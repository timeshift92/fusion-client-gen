@page "/counter"
@using System.Threading
@using Uztelecom.Template.Shared
@using Stl.Fusion
@using Stl.Fusion.Extensions
@inherits Stl.Fusion.Blazor.ComputedStateComponent<string>
@inject ICounterService _counter
@inject IFusionTime _time
@inject NavigationManager _nav

@{
    var state = State.ValueOrDefault;
    var error = State.Error;
}


<WhenException Exception="error" />

<MudText>Count: @state</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Increment">Increment</MudButton>

@code {
    protected override async Task<string> ComputeState(CancellationToken cancellationToken)
    {
        var count = await _counter.Get(cancellationToken);
        return $"{count}";
    }

    private async Task Increment()
    {
        var computed = State.Computed; // Optional if the rest is commented out
        await _counter.Increment();

        // The rest of code here is optional: it triggers instant state update.
        // If you comment it out, it will happen anyway, but with
        // a default update delay. The delay is controlled by UpdateDelayer,
        // see how it's registered in Program.cs.
        await computed.WhenInvalidated();
        await State.Update();
    }
}
